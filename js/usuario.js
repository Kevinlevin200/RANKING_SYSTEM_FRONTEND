const API_BASE = "http://localhost:4000/api/v1";
const token = localStorage.getItem("token");
let usuarioId = null;

// üîê Verificar sesi√≥n
async function verificarSesion() {
  try {
    const res = await fetch(`${API_BASE}/usuarios/verificar-sesion`, {
      method: 'GET',
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
    });

    if (!res.ok) {
      throw new Error('Sesi√≥n inv√°lida');
    }

    const data = await res.json();
    document.getElementById("userEmail").textContent = data.usuario.email || data.email;
    document.getElementById("userNombre").textContent = data.usuario.usuario || data.usuario.nombre || 'Usuario';
    
    return data.usuario;
  } catch (error) {
    console.error('Error en verificaci√≥n de sesi√≥n:', error);
    alert("Sesi√≥n inv√°lida. Redirigiendo al inicio...");
    localStorage.removeItem("token");
    window.location.href = "../index.html";
  }
}

// üìä Cargar restaurantes por ranking
async function cargarRestaurantes() {
  try {
    mostrarCargando('restaurantesContainer');
    
    const res = await fetch(`${API_BASE}/ranking/ranking`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (!res.ok) {
      throw new Error('Error al cargar restaurantes');
    }

    const data = await res.json();
    const contenedor = document.getElementById("restaurantesContainer");
    contenedor.innerHTML = "";

    if (!data || data.length === 0) {
      contenedor.innerHTML = '<p style="color: #64748b;">No hay restaurantes disponibles.</p>';
      return;
    }

    // A√±adir filtros de categor√≠a
    const categorias = [...new Set(data.map(item => item.restaurante?.categoria).filter(Boolean))];
    if (categorias.length > 0) {
      const filterSection = document.createElement('div');
      filterSection.className = 'filter-section';
      filterSection.innerHTML = `
        <button class="filter-btn active" onclick="cargarRestaurantes()">Todos</button>
        ${categorias.map(cat => `
          <button class="filter-btn" onclick="filtrarPorCategoria('${cat}')">${cat}</button>
        `).join('')}
      `;
      contenedor.appendChild(filterSection);
    }

    data.forEach(({ restaurante, score }, index) => {
      if (!restaurante) return;
      
      const card = document.createElement("div");
      card.className = "restaurante-card";
      card.style.animationDelay = `${index * 0.1}s`;
      card.innerHTML = `
        <h3>üçΩÔ∏è ${restaurante.nombre}</h3>
        <p><strong>Rating:</strong> ‚≠ê ${score ? score.toFixed(1) : 'N/A'}</p>
        <p><strong>Categor√≠a:</strong> ${restaurante.categoria || 'Sin categor√≠a'}</p>
        <p><strong>Ubicaci√≥n:</strong> ${restaurante.ubicacion || 'No especificada'}</p>
        <button class="btn" onclick="verDetalle('${restaurante._id}')">Ver detalle</button>
      `;
      contenedor.appendChild(card);
    });
  } catch (error) {
    console.error('Error al cargar restaurantes:', error);
    const contenedor = document.getElementById("restaurantesContainer");
    contenedor.innerHTML = '<p style="color: #ef4444;">Error al cargar restaurantes. Por favor intenta de nuevo.</p>';
  }
}

// üîÇ Filtrar por categor√≠a
async function filtrarPorCategoria(categoria) {
  try {
    mostrarCargando('restaurantesContainer');
    
    const res = await fetch(`${API_BASE}/ranking/categoria/${categoria}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (!res.ok) {
      throw new Error('Error al filtrar restaurantes');
    }

    const data = await res.json();
    const contenedor = document.getElementById("restaurantesContainer");
    contenedor.innerHTML = `<h3 style="margin-bottom: 20px; color: #667eea;">üìÇ Filtrado por: ${categoria}</h3>`;

    // Re-a√±adir filtros
    const allRes = await fetch(`${API_BASE}/ranking/ranking`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    const allData = await allRes.json();
    const categorias = [...new Set(allData.map(item => item.restaurante?.categoria).filter(Boolean))];
    
    const filterSection = document.createElement('div');
    filterSection.className = 'filter-section';
    filterSection.innerHTML = `
      <button class="filter-btn" onclick="cargarRestaurantes()">Todos</button>
      ${categorias.map(cat => `
        <button class="filter-btn ${cat === categoria ? 'active' : ''}" onclick="filtrarPorCategoria('${cat}')">${cat}</button>
      `).join('')}
    `;
    contenedor.appendChild(filterSection);

    if (!data || data.length === 0) {
      contenedor.innerHTML += '<p style="color: #64748b;">No hay restaurantes en esta categor√≠a.</p>';
      return;
    }

    data.forEach(({ restaurante, score }, index) => {
      if (!restaurante) return;
      
      const card = document.createElement("div");
      card.className = "restaurante-card";
      card.style.animationDelay = `${index * 0.1}s`;
      card.innerHTML = `
        <h3>üçΩÔ∏è ${restaurante.nombre}</h3>
        <p><strong>Rating:</strong> ‚≠ê ${score ? score.toFixed(1) : 'N/A'}</p>
        <p><strong>Categor√≠a:</strong> ${restaurante.categoria || 'Sin categor√≠a'}</p>
        <button class="btn" onclick="verDetalle('${restaurante._id}')">Ver detalle</button>
      `;
      contenedor.appendChild(card);
    });
  } catch (error) {
    console.error('Error al filtrar:', error);
    const contenedor = document.getElementById("restaurantesContainer");
    contenedor.innerHTML = '<p style="color: #ef4444;">Error al filtrar restaurantes.</p>';
  }
}

// üîç Vista detallada
async function verDetalle(id) {
  try {
    mostrarCargando('rese√±asContainer');
    
    const res = await fetch(`${API_BASE}/ranking/detalle/${id}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (!res.ok) {
      throw new Error('Error al cargar detalles');
    }

    const data = await res.json();
    const contenedor = document.getElementById("rese√±asContainer");
    contenedor.innerHTML = `<h3 style="margin-bottom: 20px; color: #667eea;">üè™ ${data.restaurante.nombre}</h3>`;

    // Mostrar platos si existen
    if (data.platos && data.platos.length > 0) {
      contenedor.innerHTML += '<h4 style="margin: 15px 0; color: #1e293b;">üçΩÔ∏è Men√∫:</h4>';
      data.platos.forEach(plato => {
        contenedor.innerHTML += `
          <div style="background: #f1f5f9; padding: 10px; margin: 8px 0; border-radius: 8px;">
            <strong>${plato.nombre}</strong> - $${plato.precio}
          </div>
        `;
      });
    }

    // Formulario para crear nueva rese√±a
    contenedor.innerHTML += `
      <div style="margin: 25px 0; padding: 20px; background: #f8fafc; border-radius: 12px; border: 2px solid #e2e8f0;">
        <h4 style="margin-bottom: 15px; color: #1e293b;">‚úçÔ∏è Escribe tu rese√±a</h4>
        <textarea id="nuevoComentario" placeholder="Comparte tu experiencia..." 
          style="width: 100%; padding: 12px; border: 2px solid #e2e8f0; border-radius: 8px; margin-bottom: 12px; min-height: 100px; font-family: inherit;"></textarea>
        <input type="number" id="nuevaCalificacion" min="1" max="5" placeholder="Calificaci√≥n (1-5)" 
          style="width: 100%; padding: 12px; border: 2px solid #e2e8f0; border-radius: 8px; margin-bottom: 12px;">
        <button class="btn" onclick="crearRese√±a('${id}')">Publicar rese√±a</button>
      </div>
    `;

    // Mostrar rese√±as existentes
    if (data.rese√±as && data.rese√±as.length > 0) {
      contenedor.innerHTML += '<h4 style="margin: 20px 0; color: #1e293b;">üí¨ Rese√±as de usuarios:</h4>';
      
      data.rese√±as.forEach(rese√±a => {
        const esPropia = rese√±a.usuarioId === usuarioId || rese√±a.usuarioId?._id === usuarioId;
        const card = document.createElement('div');
        card.className = 'rese√±a-card';
        
        card.innerHTML = `
          <p style="font-size: 1.05rem; margin-bottom: 10px;"><strong>${rese√±a.comentario}</strong></p>
          <p>‚≠ê Calificaci√≥n: ${rese√±a.calificacion}/5</p>
          <p style="font-size: 0.9rem; color: #78350f;">
            üë§ Por: ${rese√±a.usuarioId?.usuario || rese√±a.usuarioId?.nombre || 'Usuario'}
          </p>
          <div style="margin-top: 12px;">
            ${!esPropia ? `
              <button class="btn" style="background: #10b981; padding: 8px 16px; font-size: 0.9rem;" 
                onclick="darLike('${rese√±a._id}')">üëç ${rese√±a.likes?.length || 0}</button>
              <button class="btn secondary" style="padding: 8px 16px; font-size: 0.9rem;" 
                onclick="darDislike('${rese√±a._id}')">üëé ${rese√±a.dislikes?.length || 0}</button>
            ` : `
              <button class="btn" style="background: #f59e0b; padding: 8px 16px; font-size: 0.9rem;" 
                onclick="editarRese√±a('${rese√±a._id}', '${id}')">‚úèÔ∏è Editar</button>
              <button class="btn secondary" style="background: #ef4444; padding: 8px 16px; font-size: 0.9rem;" 
                onclick="eliminarRese√±a('${rese√±a._id}', '${id}')">üóëÔ∏è Eliminar</button>
            `}
          </div>
        `;
        contenedor.appendChild(card);
      });
    } else {
      contenedor.innerHTML += '<p style="color: #64748b; margin-top: 15px;">No hay rese√±as a√∫n. ¬°S√© el primero en opinar!</p>';
    }
  } catch (error) {
    console.error('Error al cargar detalles:', error);
    const contenedor = document.getElementById("rese√±asContainer");
    contenedor.innerHTML = '<p style="color: #ef4444;">Error al cargar detalles del restaurante.</p>';
  }
}

// üìù Crear rese√±a
async function crearRese√±a(restauranteId) {
  const comentario = document.getElementById('nuevoComentario')?.value.trim();
  const calificacion = parseInt(document.getElementById('nuevaCalificacion')?.value);

  if (!comentario || !calificacion) {
    alert('Por favor completa todos los campos de la rese√±a.');
    return;
  }

  if (calificacion < 1 || calificacion > 5) {
    alert('La calificaci√≥n debe estar entre 1 y 5.');
    return;
  }

  try {
    const res = await fetch(`${API_BASE}/rese√±a/registrar`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({ 
        restauranteId, 
        comentario, 
        calificacion, 
        usuarioId 
      }),
    });

    const data = await res.json();
    
    if (!res.ok) {
      throw new Error(data.error || 'Error al crear rese√±a');
    }

    alert(data.message || '‚úÖ Rese√±a creada exitosamente');
    verDetalle(restauranteId);
  } catch (error) {
    console.error('Error al crear rese√±a:', error);
    alert('Error: ' + error.message);
  }
}

// ‚úèÔ∏è Editar rese√±a
async function editarRese√±a(id, restauranteId) {
  const nuevoComentario = prompt("Nuevo comentario:");
  if (!nuevoComentario) return;
  
  const nuevaCalificacion = parseInt(prompt("Nueva calificaci√≥n (1-5):"));
  if (!nuevaCalificacion || nuevaCalificacion < 1 || nuevaCalificacion > 5) {
    alert('Calificaci√≥n inv√°lida');
    return;
  }

  try {
    const res = await fetch(`${API_BASE}/rese√±a/${id}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({ 
        comentario: nuevoComentario, 
        calificacion: nuevaCalificacion, 
        usuarioId 
      }),
    });

    const data = await res.json();
    
    if (!res.ok) {
      throw new Error(data.error || 'Error al editar rese√±a');
    }

    alert(data.message || '‚úÖ Rese√±a actualizada exitosamente');
    verDetalle(restauranteId);
  } catch (error) {
    console.error('Error al editar rese√±a:', error);
    alert('Error: ' + error.message);
  }
}

// üóëÔ∏è Eliminar rese√±a
async function eliminarRese√±a(id, restauranteId) {
  const confirmacion = confirm("¬øEst√°s seguro de que quieres eliminar esta rese√±a?");
  if (!confirmacion) return;

  try {
    const res = await fetch(`${API_BASE}/rese√±a/${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({ usuarioId }),
    });

    const data = await res.json();
    
    if (!res.ok) {
      throw new Error(data.error || 'Error al eliminar rese√±a');
    }

    alert(data.message || '‚úÖ Rese√±a eliminada exitosamente');
    verDetalle(restauranteId);
  } catch (error) {
    console.error('Error al eliminar rese√±a:', error);
    alert('Error: ' + error.message);
  }
}

// üëç Like
async function darLike(id) {
  try {
    const res = await fetch(`${API_BASE}/rese√±a/${id}/like`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({ usuarioId }),
    });

    const data = await res.json();
    
    if (!res.ok) {
      throw new Error(data.error || 'Error al dar like');
    }

    alert(data.message || 'üëç Like a√±adido');
    location.reload();
  } catch (error) {
    console.error('Error al dar like:', error);
    alert('Funci√≥n de like: ' + error.message);
  }
}

// üëé Dislike
async function darDislike(id) {
  try {
    const res = await fetch(`${API_BASE}/rese√±a/${id}/dislike`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({ usuarioId }),
    });

    const data = await res.json();
    
    if (!res.ok) {
      throw new Error(data.error || 'Error al dar dislike');
    }

    alert(data.message || 'üëé Dislike a√±adido');
    location.reload();
  } catch (error) {
    console.error('Error al dar dislike:', error);
    alert('Funci√≥n de dislike: ' + error.message);
  }
}

// üîÑ Mostrar indicador de carga
function mostrarCargando(containerId) {
  const contenedor = document.getElementById(containerId);
  if (contenedor) {
    contenedor.innerHTML = '<div style="text-align: center; padding: 20px;"><div class="loading"></div></div>';
  }
}

// üö™ Logout
document.getElementById("logoutBtn")?.addEventListener("click", () => {
  if (confirm('¬øSeguro que quieres cerrar sesi√≥n?')) {
    localStorage.removeItem("token");
    window.location.href = "../index.html";
  }
});

// üß† Inicializar
document.addEventListener('DOMContentLoaded', async () => {
  if (!token) {
    alert('No has iniciado sesi√≥n');
    window.location.href = "../index.html";
    return;
  }

  try {
    const user = await verificarSesion();
    usuarioId = user._id || user.id;
    await cargarRestaurantes();
  } catch (error) {
    console.error('Error en inicializaci√≥n:', error);
  }
});